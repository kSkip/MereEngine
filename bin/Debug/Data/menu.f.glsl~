#version 110

uniform sampler2D tex;

varying vec3 frag_position, frag_normal;
varying vec2 frag_texcoord;
varying vec4 frag_specular;
varying float frag_shininess;

vec3 light_direction = vec3(0.0,0.0, 0.0);

const vec3 light_position = vec3(200.0,200.0,0.0);
const vec4 light_diffuse = vec4(0.5, 0.5, 0.5, 0.0);
const vec4 light_ambient = vec4(0.3, 0.3, 0.3, 1.0);
const vec4 light_specular = vec4(0.0, 0.0, 0.0, 0.0);

void main(){

	/*light_direction = normalize(frag_position - light_position);	

	vec3 mv_light_direction = (gl_ModelViewMatrix * vec4(light_direction, 0.0)).xyz,
		normal = normalize(frag_normal),
		eye = normalize(frag_position),
		reflection = reflect(mv_light_direction, normal);

	vec4 frag_diffuse = texture2D(tex, frag_texcoord);

	vec4 diffuse_factor = max(-dot(normal, mv_light_direction), 0.0) * light_diffuse;

	vec4 ambient_diffuse_factor = diffuse_factor + light_ambient;

	vec4 specular_factor = max(pow(-dot(reflection, eye), frag_shininess), 0.0) * light_specular;
    
	gl_FragColor = specular_factor * frag_specular + ambient_diffuse_factor * frag_diffuse;*/
	gl_FragColor = texture2D(tex, frag_texcoord);
}
